/* tslint:disable */
/* eslint-disable */
/**
 * Author
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineResponse2001,
    InlineResponse2001FromJSON,
    InlineResponse2001ToJSON,
    InlineResponse5001,
    InlineResponse5001FromJSON,
    InlineResponse5001ToJSON,
} from '../models';

export interface CheckPermissionRequest {
    actor: string;
    action: string;
    resource: string;
}

/**
 * 
 */
export class APIV1PermissionsApi extends runtime.BaseAPI {

    /**
     * URL Parameters:  /:actor_id/:action_name/:resource_id
     * Check Permission
     */
    async checkPermissionRaw(requestParameters: CheckPermissionRequest): Promise<runtime.ApiResponse<InlineResponse2001>> {
        if (requestParameters.actor === null || requestParameters.actor === undefined) {
            throw new runtime.RequiredError('actor','Required parameter requestParameters.actor was null or undefined when calling checkPermission.');
        }

        if (requestParameters.action === null || requestParameters.action === undefined) {
            throw new runtime.RequiredError('action','Required parameter requestParameters.action was null or undefined when calling checkPermission.');
        }

        if (requestParameters.resource === null || requestParameters.resource === undefined) {
            throw new runtime.RequiredError('resource','Required parameter requestParameters.resource was null or undefined when calling checkPermission.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/permissions/{actor}/{action}/{resource}`.replace(`{${"actor"}}`, encodeURIComponent(String(requestParameters.actor))).replace(`{${"action"}}`, encodeURIComponent(String(requestParameters.action))).replace(`{${"resource"}}`, encodeURIComponent(String(requestParameters.resource))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * URL Parameters:  /:actor_id/:action_name/:resource_id
     * Check Permission
     */
    async checkPermission(requestParameters: CheckPermissionRequest): Promise<InlineResponse2001> {
        const response = await this.checkPermissionRaw(requestParameters);
        return await response.value();
    }

}
